# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EUpHwD6qQsq37zmZ9YmkiuB_BWHPIg3j
"""

# app.py
# Backend for Art Weaver AI, now with Gemini Image Generation, tags, and points system.

import os
import cv2
import numpy as np
import base64
import json
import requests
from flask import Flask, request, render_template, jsonify, send_from_directory
from werkzeug.utils import secure_filename
import firebase_admin
from firebase_admin import credentials, auth, firestore

# --- INITIALIZATION ---

app = Flask(__name__, static_folder='static', template_folder='templates')

# Initialize Firebase Admin SDK
try:
    cred = credentials.Certificate('firebase-service-account.json')
    firebase_admin.initialize_app(cred)
    db = firestore.client()
    print("Firebase Admin SDK Initialized Successfully.")
except Exception as e:
    print(f"CRITICAL: Firebase Admin SDK Initialization Failed: {e}")
    db = None

# --- CONFIGURATION ---
UPLOAD_FOLDER = 'uploads'
ALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg'}
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
os.makedirs(UPLOAD_FOLDER, exist_ok=True)
GEMINI_API_KEY = os.environ.get('GEMINI_API_KEY', "") # Leave empty to use Canvas-provided key

# --- HELPER FUNCTIONS ---

def verify_firebase_token(request):
    auth_header = request.headers.get('Authorization')
    if not auth_header or not auth_header.startswith('Bearer '):
        return None
    id_token = auth_header.split('Bearer ')[1]
    try:
        return auth.verify_id_token(id_token)
    except Exception as e:
        print(f"Token verification failed: {e}")
        return None

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

def image_to_base64(image_array):
    _, buffer = cv2.imencode('.jpg', image_array)
    return base64.b64encode(buffer).decode('utf-8')

def cartoonize_image(image_path):
    try:
        img = cv2.imread(image_path)
        if img is None: return None
        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        gray = cv2.medianBlur(gray, 5)
        edges = cv2.adaptiveThreshold(gray, 255, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY, 9, 9)
        color = cv2.bilateralFilter(img, 9, 250, 250)
        cartoon = cv2.bitwise_and(color, color, mask=edges)
        return cartoon
    except Exception as e:
        print(f"Error in cartoonize_image: {e}")
        return None

# --- API ROUTES ---

@app.route('/api/upload-cartoon', methods=['POST'])
def upload_cartoon():
    user = verify_firebase_token(request)
    if 'file' not in request.files: return jsonify({'error': 'No file part'}), 400
    file = request.files['file']
    if file.filename == '' or not allowed_file(file.filename): return jsonify({'error': 'Invalid file'}), 400

    filename = secure_filename(file.filename)
    filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
    file.save(filepath)

    cartoon_result = cartoonize_image(filepath)
    if cartoon_result is None:
        os.remove(filepath)
        return jsonify({'error': 'Failed to process image'}), 500

    with open(filepath, "rb") as image_file:
        original_base64 = base64.b64encode(image_file.read()).decode('utf-8')
    cartoon_base64 = image_to_base64(cartoon_result)
    os.remove(filepath)

    if user and db:
        is_public = request.form.get('is_public') == 'true'
        tags = [tag.strip() for tag in request.form.get('tags', '').split(',') if tag.strip()]
        db.collection('creations').add({
            'user_id': user['uid'], 'type': 'cartoon',
            'original_image_b64': original_base64, 'generated_image_b64': cartoon_base64,
            'is_public': is_public, 'tags': tags, 'timestamp': firestore.SERVER_TIMESTAMP
        })

    return jsonify({'original': original_base64, 'cartoon': cartoon_base64})

@app.route('/api/generate-from-text', methods=['POST'])
def generate_from_text():
    user = verify_firebase_token(request)
    data = request.get_json()
    prompt = data.get('prompt')
    if not prompt: return jsonify({'error': 'Prompt is required'}), 400

    api_url = f"https://generativelanguage.googleapis.com/v1beta/models/imagen-3.0-generate-002:predict?key={GEMINI_API_KEY}"
    payload = {"instances": [{"prompt": prompt}], "parameters": {"sampleCount": 1}}

    try:
        response = requests.post(api_url, json=payload)
        response.raise_for_status()
        result = response.json()

        if result.get("predictions") and result["predictions"][0].get("bytesBase64Encoded"):
            base64_image = result["predictions"][0]["bytesBase64Encoded"]
            image_data_url = f"data:image/png;base64,{base64_image}"

            if user and db:
                is_public = data.get('is_public', False)
                tags = [tag.strip() for tag in data.get('tags', '').split(',') if tag.strip()]
                db.collection('creations').add({
                    'user_id': user['uid'], 'type': 'text-to-image', 'prompt': prompt,
                    'generated_image_b64': base64_image, 'is_public': is_public,
                    'tags': tags, 'timestamp': firestore.SERVER_TIMESTAMP
                })
            return jsonify({'image_data_url': image_data_url})
        else:
            return jsonify({'error': 'AI model returned an unexpected response.'}), 500
    except requests.exceptions.RequestException as e:
        print(f"Gemini API Error: {e}")
        return jsonify({'error': f'An error occurred with the AI service: {e}'}), 500

@app.route('/api/user/profile', methods=['GET'])
def get_user_profile():
    user = verify_firebase_token(request)
    if not user or not db: return jsonify({'error': 'Unauthorized'}), 401

    try:
        user_doc = db.collection('users').document(user['uid']).get()
        user_data = user_doc.to_dict() if user_doc.exists else {}

        creations_query = db.collection('creations').where('user_id', '==', user['uid'])
        creations_docs = list(creations_query.stream())

        total_creations = len(creations_docs)
        public_creations = sum(1 for doc in creations_docs if doc.to_dict().get('is_public'))

        # Calculate points
        points = (total_creations * 10) + (public_creations * 5)
        user_data['points'] = points

        creations = [doc.to_dict() for doc in creations_docs]

        return jsonify({'profile': user_data, 'creations': creations})
    except Exception as e:
        return jsonify({'error': str(e)}), 500

# --- FRONTEND & STATIC FILE ROUTES ---

@app.route('/')
def home(): return render_template('index.html')

@app.route('/login')
def login(): return render_template('auth.html') # <-- UPDATED

@app.route('/register')
def register(): return render_template('auth.html') # <-- UPDATED

@app.route('/profile')
def profile(): return render_template('profile.html')

@app.route('/explore')
def explore():
    search_tags = [tag.strip() for tag in request.args.get('tags', '').split(',') if tag.strip()]
    creations = []
    if db:
        query = db.collection('creations').where('is_public', '==', True)
        if search_tags:
            query = query.where('tags', 'array-contains-any', search_tags)

        docs = query.order_by('timestamp', direction=firestore.Query.DESCENDING).limit(21).stream()
        for doc in docs:
            creations.append(doc.to_dict())

    return render_template('explore.html', creations=creations, search_query=",".join(search_tags))

@app.route('/favicon.ico')
def favicon(): return send_from_directory(os.path.join(app.root_path, 'static'), 'favicon.ico', mimetype='image/vnd.microsoft.icon')

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5001)